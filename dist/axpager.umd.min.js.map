{"version":3,"file":"axpager.umd.min.js","sources":["../src/ajax/ajax-adapter.ts","../src/utils.ts","../src/ajax/adapters/xml-http-request-adapter.ts","../src/axpager.ts","../src/ajax/adapters/fetch-adapter.ts","../src/public-api.ts"],"sourcesContent":["import {RequestInitOption} from \"../config/request-option\";\n\nexport const ContentType = {\n    JSON: 'application/json',\n    URL_ENCODED: 'application/x-www-form-urlencoded',\n    FORM_DATA: 'multipart/form-data'\n};\n\n/**\n * ajax request adapter.\n */\nexport interface AjaxAdapter {\n\n    /**\n     * request method, resolve response and reject exception.\n     */\n    request(url: string, pageParams: {}, reqOption: RequestInitOption): Promise<any>;\n}","/**\n * create html element\n * @param tagName tag name\n * @param attributes attributes\n */\nexport const createElement = (tagName: string, attributes: { [index: string]: any } = {}): HTMLElement => {\n    const e = document.createElement(tagName);\n    Object.keys(attributes).forEach(a => {\n        e[a] = attributes[a];\n    });\n    return e;\n};\n\n/**\n * parse object to URLSearchParams.\n * @param obj\n */\nexport const toURLSearchParams = (obj: any): URLSearchParams => {\n    const search = new URLSearchParams();\n    if (!obj) {\n        return search;\n    }\n    Object.keys(obj).forEach(k => {\n        search.set(k, obj[k]);\n    });\n    return search;\n};","import {ContentType, AjaxAdapter} from \"../ajax-adapter\";\nimport {RequestInitOption} from \"../../config/request-option\";\nimport {toURLSearchParams} from \"../../utils\";\n\n/**\n * Base on XMLHttpRequest default implementation.\n */\nexport class XMLHttpRequestAdapter implements AjaxAdapter {\n    private xhr: XMLHttpRequest;\n\n    request(url: string, pageParams: {}, option: RequestInitOption): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            if (this.xhr && this.xhr.readyState !== 4) {\n                this.xhr.abort();\n            }\n            this.xhr = new XMLHttpRequest();\n            this.xhr.responseType = 'json';\n            Object.keys(option.headers).forEach(k => {\n                this.xhr.setRequestHeader(k, option.headers[k]);\n            });\n            this.xhr.onload = function () {\n                if (this.readyState === 4 && this.status >= 200 && this.status < 300) {\n                    resolve(this.response);\n                    return;\n                }\n                reject(this.status + ': ' + (this.statusText || 'request failed.'));\n            };\n            if (option.timeout && option.timeout >= 0) {\n                this.xhr.timeout = option.timeout;\n                this.xhr.ontimeout = function () {\n                    reject('408: request timeout, request wait time > ' + this.timeout);\n                };\n            }\n            this.xhr.onerror = function () {\n                reject(this.status + \": \" + (this.statusText || 'server error.'));\n            };\n            option.before(this.xhr);\n            const method = (option.method || 'GET').toUpperCase();\n            if (method === 'GET') {\n                const req = Object.assign({}, option.data, pageParams);\n                const suffix = url.includes('?') ? '&' : '?';\n                const searchUrl = url + suffix + toURLSearchParams(req);\n                this.xhr.open(method, searchUrl, true);\n                this.xhr.send();\n                return;\n            }\n            if (method === 'POST') {\n                this.xhr.open(method, url, true);\n                if (option.data instanceof FormData) {\n                    const fd = new FormData();\n                    option.data.forEach((v, k) => fd.set(k, v));\n                    Object.keys(pageParams).forEach(k => fd.set(k, pageParams[k]));\n                    this.xhr.send(fd);\n                    return;\n                }\n                const contentType = option.headers['Content-Type'] || ContentType.URL_ENCODED;\n                if (contentType === ContentType.FORM_DATA) {\n                    const fd = new FormData();\n                    Object.keys(option.data).forEach(k => fd.set(k, option.data[k]));\n                    Object.keys(pageParams).forEach(k => fd.set(k, pageParams[k]));\n                    this.xhr.send(fd);\n                    return;\n                }\n                const req = Object.assign({}, option.data, pageParams);\n                if (contentType === ContentType.URL_ENCODED) {\n                    this.xhr.send(toURLSearchParams(req));\n                    return;\n                }\n                if (contentType === ContentType.JSON) {\n                    this.xhr.send(JSON.stringify(req));\n                    return;\n                }\n                this.xhr.abort();\n                reject('Not support Content-Type: ' + contentType);\n                return;\n            }\n            reject('Not support ' + method + ' method.');\n        });\n    }\n}","import {PageConfig} from \"./config/page-config\";\nimport {RequestInitOption, RequestOption} from \"./config/request-option\";\nimport {PageEvent} from \"./config/page-event\";\nimport {XMLHttpRequestAdapter} from \"./ajax/adapters/xml-http-request-adapter\";\nimport {createElement} from \"./utils\";\n\n// noinspection JSUnresolvedReference\n/**\n * default page init config.\n */\nconst defaultPageConfig: PageConfig = {\n    itemsPerPageLabel: '每页条数 ',\n    firstPageLabel: '第一页',\n    previousPageLabel: '上一页',\n    nextPageLabel: '下一页',\n    lastPageLabel: '最后一页',\n    hidePageSize: false,\n    showFirstLastButtons: true,\n    showPageSizeOptions: true,\n    initPageNumber: 1,\n    initPageSize: 10,\n    pageRadius: 0,\n    pageNumbersType: 'button',\n    pageSizeOptions: [10, 15, 30],\n    ajaxAdapter: () => new XMLHttpRequestAdapter(),\n    getRangeLabel: (page, size, pages, length) => `第${page}/${pages}页，共${length}条`,\n    getPageParams: (page, size) => ({page: page, size: size}),\n    getPagedResource: response => ({data: response.data, length: response.pager.recordCount}),\n    changes: (pageEvent, eventTarget) => void (0),\n};\n/**\n * default request paging option.\n */\nconst defaultRequestOption: RequestOption = {\n    method: 'GET',\n    data: {},\n    headers: {},\n    timeout: -1,\n    before: init => void (0),\n    success: (data, pageEvent, requestData) => void (0),\n    error: error => void (0),\n    finish: () => void (0),\n    filter: (item, requestData) => true\n}\n\nconst icons = {\n    fastBackward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"axp-icon\"><path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"></path></svg>',\n    backward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"axp-icon\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path></svg>',\n    forward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"axp-icon\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path></svg>',\n    fastForward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"axp-icon\"><path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"></path></svg>',\n};\n\nconst initDomElements = Symbol('initDomElements');\nconst updateActionStatus = Symbol('updateActionStatus');\nconst updateRangeLabel = Symbol('updateRangeLabel');\nconst updateCurrent = Symbol('updateCurrent');\nconst calcPageNumbers = Symbol('calcPageNumbers');\n\n/**\n * paginator support ajax request and static array data paging.\n */\nexport class axpager {\n    private container!: HTMLElement;\n    private config: PageConfig = {};\n    private target: string | any[];\n    private readonly actions!: {\n        btnLast: HTMLButtonElement;\n        btnNext: HTMLButtonElement;\n        btnPrev: HTMLButtonElement;\n        btnFirst: HTMLButtonElement;\n        selectPageSize: HTMLSelectElement;\n    };\n    private readonly labels!: {\n        itemsPerPageLabel: HTMLSpanElement;\n        rangeLabel: HTMLSpanElement\n    };\n    private readonly panels!: {\n        actionsPanel: HTMLDivElement;\n        pageSizePanel: HTMLDivElement;\n        pagesPanel: HTMLDivElement | HTMLSelectElement;\n    };\n    private pageNumberButtons: HTMLButtonElement[] = [];\n    private previousPage: number = 1;\n    private currentPage: number = 1;\n    private length: number = 0;\n    private size: number = 0;\n    private pageNumbers: number[] = [];\n    private option: RequestOption;\n    private disabled = false;\n\n    /**\n     * paginator.\n     * @param container container element\n     * @param config config\n     */\n    constructor(container: HTMLElement, config?: PageConfig) {\n        this.container = container;\n        this.config = Object.assign({}, defaultPageConfig, config);\n        this.currentPage = typeof this.config.initPageNumber !== 'number' || this.config.initPageNumber < 1 ? 1 : this.config.initPageNumber;\n        this.size = this.config.pageSizeOptions.includes(this.config.initPageSize) ? this.config.initPageSize : (this.config.pageSizeOptions[0] || 10);\n        this.actions = {\n            selectPageSize: createElement('SELECT', {\n                className: 'axp-select axp-size-options',\n                disabled: true\n            }) as HTMLSelectElement,\n            btnFirst: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.firstPageLabel,\n                innerHTML: `${icons.fastBackward}<span class=\"axp-btn-touch-target\"></span>`,\n                className: 'axp-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n            btnPrev: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.previousPageLabel,\n                innerHTML: `${icons.backward}<span class=\"axp-btn-touch-target\"></span>`,\n                className: 'axp-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n            btnNext: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.nextPageLabel,\n                innerHTML: `${icons.forward}<span class=\"axp-btn-touch-target\"></span>`,\n                className: 'axp-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n            btnLast: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.lastPageLabel,\n                innerHTML: `${icons.fastForward}<span class=\"axp-btn-touch-target\"></span>`,\n                className: 'axp-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n        };\n\n        this.labels = {\n            itemsPerPageLabel: createElement('SPAN', {\n                className: 'axp-label axp-items-per-page'\n            }) as HTMLSpanElement,\n            rangeLabel: createElement('SPAN', {className: 'axp-label axp-range'}) as HTMLSpanElement\n        };\n\n        this.panels = {\n            pageSizePanel: createElement('DIV', {className: 'axp-page-size'}) as HTMLDivElement,\n            actionsPanel: createElement('DIV', {className: 'axp-range-actions'}) as HTMLDivElement,\n            pagesPanel: this.config.pageNumbersType === 'select' ?\n                createElement('SELECT', {\n                    className: 'axp-select axp-page-numbers',\n                    disabled: true\n                }) as HTMLSelectElement :\n                createElement('DIV', {className: 'axp-pages'}) as HTMLDivElement\n        };\n\n        this.panels.actionsPanel.addEventListener('click', e => {\n            if (this.disabled) {\n                return;\n            }\n            let target = e.target as HTMLButtonElement;\n            if (target.classList.contains('axp-btn-touch-target')) {\n                target = target.parentElement as HTMLButtonElement;\n            }\n            if (target == null || target.disabled) {\n                return;\n            }\n            const actions = this.actions;\n            let allow = true;\n            switch (target) {\n                case actions.btnFirst:\n                    if (this.currentPage === 1) {\n                        allow = false;\n                        break;\n                    }\n                    this.previousPage = this.currentPage;\n                    this.currentPage = 1;\n                    break;\n                case actions.btnPrev:\n                    if (this.currentPage === 1) {\n                        allow = false;\n                        break;\n                    }\n                    this.previousPage = this.currentPage;\n                    this.currentPage = this.currentPage > 1 ? this.currentPage - 1 : 1;\n                    break;\n                case actions.btnNext:\n                    const pageCount = this.pages;\n                    if (this.currentPage === pageCount) {\n                        allow = false;\n                        break;\n                    }\n                    this.previousPage = this.currentPage;\n                    const next = this.currentPage + 1;\n                    this.currentPage = next > pageCount ? pageCount : next;\n                    break;\n                case actions.btnLast:\n                    const totalPages = this.pages;\n                    if (this.currentPage === totalPages) {\n                        allow = false;\n                        break;\n                    }\n                    this.previousPage = this.currentPage;\n                    this.currentPage = totalPages;\n                    break;\n                default:\n                    if (this.config.pageNumbersType !== 'select' && this.config.pageRadius > 1) {\n                        const idx = this.pageNumberButtons.indexOf(target);\n                        if (idx > -1) {\n                            if (this.currentPage === this.pageNumbers[idx]) {\n                                allow = false;\n                                break;\n                            }\n                            this.previousPage = this.currentPage;\n                            this.currentPage = this.pageNumbers[idx];\n                            break;\n                        }\n                    }\n                    allow = false;\n                    break;\n            }\n            if (allow) {\n                this.config.changes(this.pageEvent, target);\n                this.of(this.target, this.option);\n            }\n        });\n\n        this.actions.selectPageSize.addEventListener('change', e => {\n            if (this.disabled) {\n                return;\n            }\n            const select = e.target as HTMLSelectElement;\n            if (select.disabled) {\n                return;\n            }\n            this.previousPage = this.currentPage;\n            const idx = select.options.selectedIndex;\n            this.size = this.config.pageSizeOptions[idx] || 10;\n            const newPages = this.pages;\n            if (this.currentPage > newPages) {\n                this.currentPage = newPages;\n            }\n            this.config.changes(this.pageEvent, e.target);\n            this.of(this.target, this.option);\n        });\n\n        if (this.config.pageNumbersType === 'select' && this.config.pageRadius > 1) {\n            this.panels.pagesPanel.addEventListener('change', e => {\n                if (this.disabled) {\n                    return;\n                }\n                const select = e.target as HTMLSelectElement;\n                if (select.disabled) {\n                    return;\n                }\n                this.previousPage = this.currentPage;\n                const idx = select.options.selectedIndex;\n                this.currentPage = this.pageNumbers[idx];\n                this.config.changes(this.pageEvent, e.target);\n                this.of(this.target, this.option);\n            });\n        }\n        this[initDomElements]();\n    }\n\n    /**\n     * total pages.\n     */\n    get pages(): number {\n        if (this.length <= 1) {\n            return 1;\n        }\n        const num = this.length / this.size;\n        if (num <= 1) {\n            return 1;\n        }\n        const int = Math.floor(num);\n        if (int === num) {\n            return int;\n        }\n        return int + 1;\n    }\n\n    /**\n     * ajax paging request page params.\n     */\n    get pageParams() {\n        return this.config.getPageParams(this.currentPage, this.size);\n    }\n\n    /**\n     * page event.\n     */\n    get pageEvent(): PageEvent {\n        const end = this.currentPage * this.size;\n        return {\n            previousPage: this.previousPage,\n            page: this.currentPage,\n            size: this.size,\n            start: (this.currentPage - 1) * this.size,\n            end: end > this.length ? this.length : end,\n            pages: this.pages,\n            length: this.length\n        }\n    }\n\n    /**\n     * init a new paginator instance.\n     * @param container container element\n     * @param config config\n     * @return xpager paginator\n     */\n    static init(container: HTMLElement, config?: PageConfig): axpager {\n        return new axpager(container, config);\n    }\n\n    /**\n     * ajax request paging.\n     * @param url url\n     * @param option option\n     */\n    ajax(url: string, option?: RequestOption) {\n        if (this.disabled) {\n            return;\n        }\n        if (!(typeof url === 'string')) {\n            throw Error('Request url is required.');\n        }\n        this.target = url;\n        this.option = Object.assign({}, defaultRequestOption, option);\n        const initOption: RequestInitOption = {\n            method: this.option.method,\n            data: this.option.data,\n            headers: this.option.headers,\n            timeout: this.option.timeout,\n            before: this.option.before\n        };\n        const p = this.config.ajaxAdapter().request(this.target, this.pageParams, initOption)\n            .then(response => {\n                const {data, length} = this.config.getPagedResource(response);\n                this[updateCurrent](length);\n                const pageEvent = this.pageEvent;\n                this.option.success(data, pageEvent, this.option.data);\n                this[updateActionStatus](pageEvent.page, pageEvent.pages, pageEvent.length);\n                this[updateRangeLabel]();\n            });\n        if (typeof p.finally === 'function') {\n            p.catch(this.option.error)\n                .finally(this.option.finish);\n            return;\n        }\n        p.then(() => this.option.finish())\n            .catch(this.option.error);\n    }\n\n    /**\n     * static array data paging.\n     * @param data array\n     * @param option option\n     */\n    resource(data: any[], option?: RequestOption) {\n        if (this.disabled) {\n            return;\n        }\n        if (!(data instanceof Array)) {\n            throw Error('data must be an Array.');\n        }\n        this.target = data;\n        this.option = Object.assign({}, defaultRequestOption, option);\n        this.option.before(null);\n        const filteredResource = this.target.filter(item => this.option.filter(item, this.option.data));\n        this[updateCurrent](filteredResource.length);\n        const pageEvent = this.pageEvent;\n        const pagedResource = filteredResource.slice(pageEvent.start, pageEvent.end);\n        this.option.success(pagedResource, pageEvent, this.option.data);\n        this[updateActionStatus](pageEvent.page, pageEvent.pages, pageEvent.length);\n        this[updateRangeLabel]();\n        this.option.finish();\n    }\n\n    /**\n     * request paging.\n     * @param target url or static array data\n     * @param option option\n     */\n    of(target: string | any[], option?: RequestOption) {\n        if (typeof target === 'string') {\n            this.ajax(target, option);\n            return;\n        }\n        if (target instanceof Array) {\n            this.resource(target, option);\n            return;\n        }\n        throw Error(target + ' can not be paging.');\n    }\n\n    /**\n     * refresh current page's data.\n     */\n    refresh() {\n        this.of(this.target, this.option);\n    }\n\n    /**\n     * goto target page number.\n     * @param page target page number\n     */\n    goto(page: number) {\n        if (this.disabled) {\n            return;\n        }\n        if (typeof page !== 'number') {\n            throw Error('page must be number.');\n        }\n        this.previousPage = this.currentPage;\n        if (page < 1) {\n            this.currentPage = 1;\n        } else {\n            const pageCount = this.pages;\n            this.currentPage = page > pageCount ? pageCount : page;\n        }\n        this.refresh();\n    }\n\n    /**\n     * disable all actions (select and buttons).\n     * @param isDisable is disable all actions\n     */\n    disable(isDisable: boolean) {\n        this.disabled = isDisable;\n        this[updateActionStatus](this.currentPage, this.pages, this.length);\n    }\n\n    /**\n     * calculate page numbers by radius.\n     */\n    [calcPageNumbers](): number[] {\n        if (typeof this.config.pageRadius !== \"number\") {\n            throw Error('pageRadius must be number.');\n        }\n        if (this.config.pageRadius < 2) {\n            return [];\n        }\n        const pages = this.pages;\n        let start = this.currentPage - this.config.pageRadius;\n        let end = this.currentPage + this.config.pageRadius;\n        if (start <= 0) {\n            end -= start - 1;\n        }\n        if (end > pages) {\n            start -= end - pages - 1;\n        }\n        const pageNums = [];\n        do {\n            if (start > 0 && start <= pages) {\n                pageNums.push(start);\n            }\n        } while (++start < end);\n        return pageNums;\n    }\n\n    /**\n     * update current page and page number buttons/select by length, avoid current page &gt; total pages occurs display empty result.\n     * @param length result length\n     */\n    [updateCurrent](length: number) {\n        this.length = length;\n        const pageCount = this.pages;\n        this.currentPage = this.currentPage > pageCount ? pageCount : this.currentPage;\n        if (this.config.pageRadius < 2) {\n            return;\n        }\n        this.pageNumbers = this[calcPageNumbers]();\n        // update page number button/select elements\n        if (this.config.pageNumbersType === 'select') {\n            this.panels.pagesPanel.innerHTML = this.pageNumbers.map(num => `<option ${num === this.currentPage ? 'selected' : ''}>${num}</option>`).join('');\n            return;\n        }\n        this.panels.pagesPanel.innerHTML = '';\n        this.pageNumberButtons = this.pageNumbers.map(num => {\n            const btn = createElement('BUTTON', {\n                type: 'button',\n                className: `axp-btn${num === this.currentPage ? ' axp-btn-current' : ''}`,\n                innerHTML: `${num}<span class=\"axp-btn-touch-target\"></span>`\n            }) as HTMLButtonElement;\n            this.panels.pagesPanel.appendChild(btn);\n            return btn;\n        });\n    }\n\n    /**\n     * init pager dom elements by config.\n     */\n    [initDomElements]() {\n        this.container.innerHTML = '<div class=\"ax-pager\"></div>';\n\n        this.actions.selectPageSize.innerHTML = this.config.pageSizeOptions.map(num => `<option ${this.size === num ? 'selected' : ''}>${num}</option>`).join('');\n        this.labels.itemsPerPageLabel.innerHTML = this.config.itemsPerPageLabel + (this.config.showPageSizeOptions ? '' : this.size);\n\n        // page size panel\n        [this.labels.itemsPerPageLabel,\n            (this.config.showPageSizeOptions ? this.actions.selectPageSize : null)\n        ].filter(e => e !== null)\n            .forEach(e => this.panels.pageSizePanel.appendChild(e));\n\n        // range actions panel\n        [this.labels.rangeLabel,\n            (this.config.showFirstLastButtons ? this.actions.btnFirst : null),\n            this.actions.btnPrev,\n            (this.config.pageRadius > 1 ? this.panels.pagesPanel : null),\n            this.actions.btnNext,\n            (this.config.showFirstLastButtons ? this.actions.btnLast : null)\n        ].filter(e => e !== null)\n            .forEach(e => this.panels.actionsPanel.appendChild(e));\n\n        // container\n        [(this.config.hidePageSize ? null : this.panels.pageSizePanel),\n            this.panels.actionsPanel\n        ].filter(e => e !== null)\n            .forEach(e => this.container.firstElementChild.appendChild(e));\n    }\n\n    /**\n     * update range label text.\n     */\n    [updateRangeLabel]() {\n        this.labels.rangeLabel.innerHTML = this.config.getRangeLabel(this.currentPage, this.size, this.pages, this.length);\n    }\n\n    /**\n     * update actions status.\n     * @param page current page\n     * @param pages total pages\n     * @param length result length\n     */\n    [updateActionStatus](page: number, pages: number, length: number) {\n        if (this.disabled) {\n            Object.keys(this.actions).forEach(k => this.actions[k].disabled = true);\n            if (this.config.pageRadius < 2) {\n                return;\n            }\n            if (this.config.pageNumbersType === 'select') {\n                (this.panels.pagesPanel as HTMLSelectElement).disabled = true;\n                return;\n            }\n            this.pageNumberButtons.forEach(a => a.disabled = true);\n            return;\n        }\n\n        const disableFirstPrev = page <= 1;\n        const disableNextLast = pages <= 1 || page === pages;\n\n        this.actions.selectPageSize.disabled = length <= 0;\n        this.actions.btnFirst.disabled = disableFirstPrev;\n        this.actions.btnPrev.disabled = disableFirstPrev;\n        this.actions.btnNext.disabled = disableNextLast;\n        this.actions.btnLast.disabled = disableNextLast;\n\n        if (this.config.pageRadius < 2) {\n            return;\n        }\n        if (this.config.pageNumbersType === 'select') {\n            (this.panels.pagesPanel as HTMLSelectElement).disabled = false;\n            return;\n        }\n        const pageNumberButtons = this.pageNumberButtons;\n        const pageBtnCount = pageNumberButtons.length;\n        for (let i = 0; i < pageBtnCount; i++) {\n            if (i === 0) {\n                (pageNumberButtons[i] as HTMLButtonElement).disabled = disableFirstPrev;\n                continue;\n            }\n            if (i === pageBtnCount - 1) {\n                (pageNumberButtons[i] as HTMLButtonElement).disabled = disableNextLast;\n                continue;\n            }\n            // current page number button always disable.\n            if (i === this.pageNumbers.indexOf(page)) {\n                (pageNumberButtons[i] as HTMLButtonElement).disabled = true;\n                continue;\n            }\n            (pageNumberButtons[i] as HTMLButtonElement).disabled = false;\n        }\n    }\n}","import {ContentType, AjaxAdapter} from \"../ajax-adapter\";\nimport {RequestInitOption} from \"../../config/request-option\";\nimport {toURLSearchParams} from \"../../utils\";\n\n/**\n * Based on fetch api adapter.\n */\nexport class FetchAdapter implements AjaxAdapter {\n    private controller: AbortController;\n    private timeoutId: number;\n\n    request(url: string, pageParams: {}, option: RequestInitOption): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            const method = (option.method || 'GET').toUpperCase();\n            let searchUrl = url;\n\n            const initOption: RequestInit = {\n                method: method,\n                headers: option.headers,\n            };\n\n            if (method === 'GET') {\n                const req = Object.assign({}, option.data, pageParams);\n                const suffix = url.includes('?') ? '&' : '?';\n                searchUrl = searchUrl + suffix + toURLSearchParams(req);\n            } else if (method === 'POST') {\n                if (option.data instanceof FormData) {\n                    const fd = new FormData();\n                    option.data.forEach((v, k) => fd.set(k, v));\n                    Object.keys(pageParams).forEach(k => fd.set(k, pageParams[k]));\n                    initOption.body = fd;\n                } else {\n                    const contentType = initOption.headers['Content-Type'] || ContentType.URL_ENCODED;\n                    if (contentType === ContentType.FORM_DATA) {\n                        const fd = new FormData();\n                        Object.keys(option.data).forEach(k => fd.set(k, option.data[k]));\n                        Object.keys(pageParams).forEach(k => fd.set(k, pageParams[k]));\n                        initOption.body = fd;\n                    } else {\n                        const req = Object.assign({}, option.data, pageParams);\n                        if (contentType === ContentType.URL_ENCODED) {\n                            initOption.body = toURLSearchParams(req);\n                        } else if (contentType === ContentType.JSON) {\n                            initOption.body = JSON.stringify(req);\n                        }\n                    }\n                }\n            }\n            if (this.controller) {\n                this.controller.abort();\n            }\n            if (this.timeoutId > -1) {\n                window.clearTimeout(this.timeoutId);\n                this.timeoutId = -1;\n            }\n            if (option.timeout >= 0) {\n                this.timeoutId = window.setTimeout(() => {\n                    if (this.controller) {\n                        this.controller.abort('408: request timeout, request wait time > ' + option.timeout);\n                    }\n                }, option.timeout);\n            }\n            this.controller = new AbortController();\n            initOption.signal = this.controller.signal;\n            option.before(initOption);\n            fetch(searchUrl, initOption)\n                .then(response => {\n                    if (response.ok) {\n                        response.json().then(resolve);\n                        return;\n                    }\n                    reject(response.status + ': ' + (response.statusText || 'request failed.'));\n                }).catch(reject);\n        });\n    }\n}","import {PageConfig} from \"./config/page-config\";\nimport {axpager} from \"./axpager\";\nimport {XMLHttpRequestAdapter} from \"./ajax/adapters/xml-http-request-adapter\";\nimport {FetchAdapter} from \"./ajax/adapters/fetch-adapter\";\n\n/**\n * init a new paginator instance.\n */\nconst init: (container: HTMLElement, config: PageConfig) => axpager = axpager.init;\n\nexport {\n    axpager as Paginator,\n    init,\n    XMLHttpRequestAdapter,\n    FetchAdapter\n};\n\nexport * from \"./config/page-event\";\nexport * from \"./config/page-config\";\nexport * from \"./config/request-option\";\nexport * from \"./ajax/ajax-adapter\";\n"],"names":["ContentType","JSON","URL_ENCODED","FORM_DATA","createElement","tagName","attributes","e","document","Object","keys","forEach","a","toURLSearchParams","obj","search","URLSearchParams","k","set","XMLHttpRequestAdapter","prototype","request","url","pageParams","option","_this","this","Promise","resolve","reject","xhr","readyState","abort","XMLHttpRequest","responseType","headers","setRequestHeader","onload","status","response","statusText","timeout","ontimeout","onerror","before","method","toUpperCase","req","assign","data","suffix","includes","searchUrl","open","send","FormData","fd_1","v","contentType","fd_2","stringify","defaultPageConfig","itemsPerPageLabel","firstPageLabel","previousPageLabel","nextPageLabel","lastPageLabel","hidePageSize","showFirstLastButtons","showPageSizeOptions","initPageNumber","initPageSize","pageRadius","pageNumbersType","pageSizeOptions","ajaxAdapter","getRangeLabel","page","size","pages","length","concat","getPageParams","getPagedResource","pager","recordCount","changes","pageEvent","eventTarget","defaultRequestOption","init","success","requestData","error","finish","filter","item","icons","initDomElements","Symbol","updateActionStatus","updateRangeLabel","updateCurrent","calcPageNumbers","axpager","container","config","pageNumberButtons","previousPage","currentPage","pageNumbers","disabled","actions","selectPageSize","className","btnFirst","type","title","innerHTML","btnPrev","btnNext","btnLast","labels","rangeLabel","panels","pageSizePanel","actionsPanel","pagesPanel","addEventListener","target","classList","contains","parentElement","allow","pageCount","next","totalPages","idx","indexOf","of","select","options","selectedIndex","newPages","defineProperty","get","num","int","Math","floor","end","start","ajax","Error","initOption","p","then","_a","finally","catch","resource","Array","filteredResource","pagedResource","slice","refresh","goto","disable","isDisable","pageNums","push","map","btn","appendChild","join","firstElementChild","disableFirstPrev","disableNextLast","pageBtnCount","i","FetchAdapter","body","controller","timeoutId","window","clearTimeout","setTimeout","AbortController","signal","fetch","ok","json"],"mappings":"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"}
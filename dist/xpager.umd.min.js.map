{"version":3,"file":"xpager.umd.min.js","sources":["../src/xpager.ts","../src/public-api.ts"],"sourcesContent":["import {PageConfig} from \"./config/page-config\";\nimport {RequestOption} from \"./config/request-option\";\nimport {PageEvent} from \"./config/page-event\";\n\nconst ContentType = {\n    JSON: 'application/json',\n    URL_ENCODED: 'application/x-www-form-urlencoded'\n};\n\n// noinspection JSUnresolvedReference\n/**\n * default page init config.\n */\nconst defaultPageConfig: PageConfig = {\n    itemsPerPageLabel: '每页条数',\n    firstPageLabel: '第一页',\n    previousPageLabel: '上一页',\n    nextPageLabel: '下一页',\n    lastPageLabel: '最后一页',\n    hidePageSize: false,\n    showFirstLastButtons: true,\n    showPageSizeOptions: true,\n    pageSizeOptions: [10, 15, 30],\n    getRangeLabel: (page: number, size: number, length: number) => `第${page}/${Math.floor(length / size + 1)}页，共${length}条`,\n    getPagedResource: response => ({data: response.data, length: response.pager.recordCount}),\n    changes: (pageEvent, eventTarget) => void (0),\n};\n/**\n * default request paging option.\n */\nconst defaultRequestOption: RequestOption = {\n    method: 'GET',\n    data: {},\n    headers: {},\n    timeout: -1,\n    before: xhr => void (0),\n    success: (data, pageEvent) => void (0),\n    error: error => void 0,\n    finish: () => void (0),\n    filter: item => true\n}\n\nconst icons = {\n    fastBackward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"mat-icon\"><path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"></path></svg>',\n    backward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"mat-icon\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"></path></svg>',\n    forward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"mat-icon\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path></svg>',\n    fastForward: '<svg viewBox=\"0 0 24 24\" focusable=\"false\" class=\"mat-icon\"><path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"></path></svg>',\n};\n\nexport const createElement = (tagName: string, attributes: { [index: string]: any } = {}): HTMLElement => {\n    const e = document.createElement(tagName);\n    Object.keys(attributes).forEach(a => {\n        e[a] = attributes[a];\n    });\n    return e;\n};\n\nconst initDomElements = Symbol('initDomElements');\nconst updateActionStatus = Symbol('updateActionStatus');\nconst updateRangeLabel = Symbol('updateRangeLabel');\n\n/**\n * paginator support ajax request and static array data paging.\n * @author chengyuxingo@gmail.com\n */\nexport class xpager {\n    private container!: HTMLElement;\n    private config: PageConfig = {};\n    private target: string | any[];\n    private readonly actions!: {\n        btnLast: HTMLButtonElement;\n        btnNext: HTMLButtonElement;\n        btnPrev: HTMLButtonElement;\n        btnFirst: HTMLButtonElement;\n        selectPageSize: HTMLSelectElement;\n    };\n    private readonly labels!: {\n        itemsPerPageLabel: HTMLSpanElement;\n        rangeLabel: HTMLSpanElement\n    };\n    private readonly panels!: {\n        actionsPanel: HTMLDivElement;\n        pageSizePanel: HTMLDivElement;\n    };\n    private previousPage: number = 1;\n    private currentPage: number = 1;\n    private length: number = 0;\n    private size: number = 0;\n    private option: RequestOption;\n    private xhr: XMLHttpRequest;\n\n    /**\n     * paginator.\n     * @param container container element\n     * @param config config\n     */\n    constructor(container: HTMLElement, config?: PageConfig) {\n        this.container = container;\n        this.container.innerHTML = '<div class=\"rabbit-pager\"></div>';\n\n        this.config = Object.assign({}, defaultPageConfig, config);\n        this.size = this.config.pageSizeOptions[0] || 10;\n\n        this.actions = {\n            selectPageSize: createElement('SELECT', {\n                className: 'mat-select mat-size-options',\n                disabled: true\n            }) as HTMLSelectElement,\n            btnFirst: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.firstPageLabel,\n                innerHTML: `${icons.fastBackward}<span class=\"mat-btn-touch-target\"></span>`,\n                className: 'mat-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n            btnPrev: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.previousPageLabel,\n                innerHTML: `${icons.backward}<span class=\"mat-btn-touch-target\"></span>`,\n                className: 'mat-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n            btnNext: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.nextPageLabel,\n                innerHTML: `${icons.forward}<span class=\"mat-btn-touch-target\"></span>`,\n                className: 'mat-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n            btnLast: createElement('BUTTON', {\n                type: 'button',\n                title: this.config.lastPageLabel,\n                innerHTML: `${icons.fastForward}<span class=\"mat-btn-touch-target\"></span>`,\n                className: 'mat-btn',\n                disabled: true\n            }) as HTMLButtonElement,\n        };\n\n        this.labels = {\n            itemsPerPageLabel: createElement('SPAN', {\n                className: 'mat-label mat-items-per-page'\n            }) as HTMLSpanElement,\n            rangeLabel: createElement('SPAN', {className: 'mat-label mat-range'}) as HTMLSpanElement\n        };\n\n        this.panels = {\n            pageSizePanel: createElement('DIV', {className: 'mat-page-size'}) as HTMLDivElement,\n            actionsPanel: createElement('DIV', {className: 'mat-range-actions'}) as HTMLDivElement\n        };\n\n        this.container.addEventListener('click', e => {\n            let target = e.target as HTMLButtonElement;\n            if (target == null) return;\n            if (target.className === 'mat-btn-touch-target') {\n                target = target.parentElement as HTMLButtonElement;\n            }\n            if (target.disabled) {\n                return;\n            }\n            const actions = this.actions;\n            let matched = true;\n            this.previousPage = this.currentPage;\n            switch (target) {\n                case actions.btnFirst:\n                    this.currentPage = 1;\n                    break;\n                case actions.btnPrev:\n                    this.currentPage = this.currentPage > 1 ? this.currentPage - 1 : 1;\n                    break;\n                case actions.btnNext:\n                    const next = this.currentPage + 1;\n                    const pageCount = this.pages;\n                    this.currentPage = next > pageCount ? pageCount : next;\n                    break;\n                case actions.btnLast:\n                    this.currentPage = this.pages;\n                    break;\n                default:\n                    matched = false;\n                    break;\n            }\n            if (matched) {\n                this.config.changes(this.pageEvent, target);\n                this.of(this.target, this.option);\n            }\n        });\n\n        this.actions.selectPageSize.addEventListener('change', e => {\n            this.previousPage = this.currentPage;\n            this.size = +(e.target as HTMLSelectElement).value || 10;\n            const newPages = this.pages;\n            if (this.currentPage > newPages) {\n                this.currentPage = newPages;\n            }\n            this.config.changes(this.pageEvent, e.target);\n            this.of(this.target, this.option);\n        });\n\n        this[initDomElements]();\n    }\n\n    /**\n     * total pages count.\n     */\n    get pages(): number {\n        return Math.floor(this.length / this.size) + 1;\n    }\n\n    /**\n     * ajax paging request page params.\n     */\n    get pageParams() {\n        return {\n            page: this.currentPage,\n            size: this.size\n        };\n    }\n\n    /**\n     * page event.\n     */\n    get pageEvent(): PageEvent {\n        const end = this.currentPage * this.size;\n        return {\n            previousPage: this.previousPage,\n            page: this.currentPage,\n            size: this.size,\n            start: (this.currentPage - 1) * this.size,\n            end: end > this.length ? this.length : end,\n            pages: this.pages,\n            length: this.length\n        }\n    }\n\n    /**\n     * init a new paginator instance.\n     * @param container container element\n     * @param config config\n     * @return xpager paginator\n     */\n    static init(container: HTMLElement, config?: PageConfig): xpager {\n        return new xpager(container, config);\n    }\n\n    [initDomElements]() {\n        this.actions.selectPageSize.innerHTML = this.config.pageSizeOptions.map(num => `<option value=\"${num}\">${num}</option>`).join('');\n        this.labels.itemsPerPageLabel.innerHTML = this.config.itemsPerPageLabel + (this.config.showPageSizeOptions ? '' : this.config.pageSizeOptions[0] || 10);\n\n        // page size panel\n        [this.labels.itemsPerPageLabel,\n            (this.config.showPageSizeOptions ? this.actions.selectPageSize : null)\n        ].filter(e => e !== null)\n            .forEach(e => this.panels.pageSizePanel.appendChild(e));\n\n        // range actions panel\n        [this.labels.rangeLabel,\n            (this.config.showFirstLastButtons ? this.actions.btnFirst : null),\n            this.actions.btnPrev,\n            this.actions.btnNext,\n            (this.config.showFirstLastButtons ? this.actions.btnLast : null)\n        ].filter(e => e !== null)\n            .forEach(e => this.panels.actionsPanel.appendChild(e));\n\n        // container\n        [(this.config.hidePageSize ? null : this.panels.pageSizePanel),\n            this.panels.actionsPanel\n        ].filter(e => e !== null)\n            .forEach(e => this.container.firstElementChild.appendChild(e));\n    }\n\n    /**\n     * ajax request paging.\n     * @param url url\n     * @param option option\n     */\n    ajax(url: String, option?: RequestOption) {\n        if (!(typeof url === 'string')) {\n            throw Error('Request url is required.');\n        }\n        const that = this;\n        this.target = url as string;\n        this.option = Object.assign({}, defaultRequestOption, option);\n        if (!this.xhr) {\n            this.xhr = new XMLHttpRequest();\n            Object.keys(this.option.headers).forEach(k => {\n                this.xhr.setRequestHeader(k, this.option.headers[k]);\n            });\n            this.xhr.responseType = 'json';\n            this.xhr.addEventListener('load', function () {\n                if (this.status === 200) {\n                    const {data, length} = that.config.getPagedResource(this.response);\n                    that.length = length;\n                    const pageEvent = that.pageEvent;\n                    that.option.success(data, pageEvent);\n                    that[updateActionStatus](pageEvent.page, pageEvent.pages, pageEvent.length);\n                    that[updateRangeLabel]();\n                    return;\n                }\n                that.option.error(new Error(this.status + ': request failed, ' + this.statusText));\n            });\n            if (this.option.timeout && this.option.timeout >= 0) {\n                this.xhr.timeout = this.option.timeout;\n                this.xhr.addEventListener('timeout', function () {\n                    that.option.error(new Error('408: request timeout, request wait time > ' + this.timeout));\n                });\n            }\n            this.xhr.addEventListener('error', function () {\n                that.option.error(new Error('500: request error, ' + this.statusText));\n            });\n            this.xhr.addEventListener('loadend', function () {\n                that.option.finish();\n            });\n        }\n        if (this.xhr.readyState !== 4) {\n            this.xhr.abort();\n        }\n\n        const method = (this.option.method || 'GET').toLowerCase();\n\n        this.option.before(this.xhr);\n\n        if (method === 'get') {\n            const req = Object.assign({}, this.option.data, this.pageParams);\n            const suffix = this.target.includes('?') ? '&' : '?';\n            const searchUrl = this.target + suffix + new URLSearchParams(req as {});\n            this.xhr.open(method, searchUrl, true);\n            this.xhr.send();\n            return;\n        }\n\n        if (method === 'post') {\n            this.xhr.open(method, this.target, true);\n            if (this.option.data instanceof FormData) {\n                const fd = new FormData();\n                this.option.data.forEach((v, k) => fd.set(k, v));\n                const pageParams = this.pageParams;\n                Object.keys(pageParams).forEach(k => fd.set(k, pageParams[k]));\n                this.xhr.send(fd);\n                return;\n            }\n\n            const req = Object.assign({}, this.option.data, this.pageParams);\n            const contentType = this.option.headers['Content-Type'] || ContentType.URL_ENCODED;\n            if (contentType === ContentType.URL_ENCODED) {\n                this.xhr.send(new URLSearchParams(req as {}).toString());\n                return;\n            }\n            if (contentType === ContentType.JSON) {\n                this.xhr.send(JSON.stringify(req));\n                return;\n            }\n            throw Error('Not support Content-Type: ' + contentType);\n        }\n        throw Error('Not support ' + method + ' method.');\n    }\n\n    /**\n     * static array data paging.\n     * @param data array\n     * @param option option\n     */\n    resource(data: any[], option?: RequestOption) {\n        if (!(data instanceof Array)) {\n            throw Error('data must be an Array.');\n        }\n        this.target = data || [];\n        this.option = Object.assign({}, defaultRequestOption, option);\n        this.length = this.target.length;\n        this.option.before(null);\n        const filteredResource = this.target.filter(item => this.option.filter(item));\n        const pageEvent = this.pageEvent;\n        const pagedResource = filteredResource.slice(pageEvent.start, pageEvent.end);\n        this.option.success(pagedResource, pageEvent);\n        this[updateActionStatus](pageEvent.page, pageEvent.pages, pageEvent.length);\n        this[updateRangeLabel]();\n        this.option.finish();\n    }\n\n    /**\n     * request paging.\n     * @param target url or static array data\n     * @param option option\n     */\n    of(target: String | any[], option?: RequestOption) {\n        if (typeof target === 'string') {\n            this.ajax(target, option);\n            return;\n        }\n        if (target instanceof Array) {\n            this.resource(target, option);\n            return;\n        }\n        throw Error(target + ' can not be paging.');\n    }\n\n    /**\n     * refresh current page's data.\n     */\n    refresh() {\n        this.of(this.target, this.option);\n    }\n\n    [updateRangeLabel]() {\n        this.labels.rangeLabel.innerHTML = this.config.getRangeLabel(this.currentPage, this.size, this.length);\n    };\n\n    [updateActionStatus](page: number, pages: number, length: number) {\n        const a = page === 1;\n        const b = pages === 1 || page === pages;\n\n        const ra = `mat-btn${a ? '' : ' mat-ripple-btn'}`;\n        const rb = `mat-btn${b ? '' : ' mat-ripple-btn'}`;\n\n        this.actions.selectPageSize.disabled = length === 0;\n\n        this.actions.btnFirst.disabled = a;\n        this.actions.btnFirst.className = ra;\n        this.actions.btnPrev.disabled = a;\n        this.actions.btnPrev.className = ra;\n\n        this.actions.btnNext.disabled = b;\n        this.actions.btnNext.className = rb;\n        this.actions.btnLast.disabled = b;\n        this.actions.btnLast.className = rb;\n    };\n}","import {PageConfig} from \"./config/page-config\";\nimport {xpager, createElement} from \"./xpager\";\n\n/**\n * init a new paginator instance.\n */\nconst init: (container: HTMLElement, config: PageConfig) => xpager = xpager.init;\n\nexport {\n    xpager as Paginator,\n    init,\n    createElement\n};\n\nexport * from \"./config/page-event\";\nexport * from \"./config/page-config\";\nexport * from \"./config/request-option\";\n\n"],"names":["ContentType","defaultPageConfig","itemsPerPageLabel","firstPageLabel","previousPageLabel","nextPageLabel","lastPageLabel","hidePageSize","showFirstLastButtons","showPageSizeOptions","pageSizeOptions","getRangeLabel","page","size","length","concat","Math","floor","getPagedResource","response","data","pager","recordCount","changes","pageEvent","eventTarget","defaultRequestOption","method","headers","timeout","before","xhr","success","error","finish","filter","item","icons","createElement","tagName","attributes","e","document","Object","keys","forEach","a","initDomElements","Symbol","updateActionStatus","updateRangeLabel","xpager","container","config","_this","this","previousPage","currentPage","innerHTML","assign","actions","selectPageSize","className","disabled","btnFirst","type","title","btnPrev","btnNext","btnLast","labels","rangeLabel","panels","pageSizePanel","actionsPanel","addEventListener","target","parentElement","matched","next","pageCount","pages","of","option","value","newPages","defineProperty","prototype","get","end","start","init","map","num","join","appendChild","firstElementChild","ajax","url","Error","that","XMLHttpRequest","k","setRequestHeader","responseType","status","_a","length_1","statusText","readyState","abort","toLowerCase","req","pageParams","suffix","includes","searchUrl","URLSearchParams","open","send","FormData","fd_1","v","set","pageParams_1","contentType","toString","JSON","stringify","resource","Array","filteredResource","pagedResource","slice","refresh","b","ra","rb"],"mappings":"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"}